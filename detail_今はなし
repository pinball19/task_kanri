<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>タスク一覧</title>
  <style>
    body { font-family: sans-serif; margin: 20px; }
    .task { padding: 10px; border: 1px solid #ccc; margin-bottom: 8px; }
    .task.completed { background-color: #e0ffe0; }
    form { margin-top: 20px; }
  </style>
</head>
<body>
  <h1>タスク一覧</h1>
  <div id="project-info"></div>
  <div id="task-list"></div>

  <h2>新規タスク追加</h2>
  <form id="task-form">
    <input type="text" id="task-name" placeholder="タスク名" required>
    <input type="date" id="task-deadline">
    <input type="text" id="task-assignee" placeholder="担当者">
    <button type="submit">追加</button>
  </form>

  <p><a href="index.html">プロジェクト一覧に戻る</a></p>

  <!-- Firebase SDK -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
    import {
      getFirestore, collection, query, where, onSnapshot, addDoc, updateDoc, doc, deleteDoc, getDoc
    } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";

    // TODO: あなたのFirebase設定情報に置き換えてください
const firebaseConfig = {
  apiKey: "AIzaSyCCx686jAuDr7aZUwRE2OAbkl9RoufKTb8",
  authDomain: "taskkanri-12742.firebaseapp.com",
  projectId: "taskkanri-12742",
  storageBucket: "taskkanri-12742.firebasestorage.app",
  messagingSenderId: "181737533274",
  appId: "1:181737533274:web:c6091948efb2b4e7338d63",
  measurementId: "G-L9PWQP0Y53"
};

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);

    // URLパラメータから projectId を取得
    const urlParams = new URLSearchParams(window.location.search);
    const projectId = urlParams.get("projectId");

    const projectInfoDiv = document.getElementById("project-info");
    const taskListDiv = document.getElementById("task-list");

    // 選択中のプロジェクト情報を表示
    async function loadProjectInfo() {
      const projectDoc = await getDoc(doc(db, "projects", projectId));
      if (projectDoc.exists()) {
        const project = projectDoc.data();
        projectInfoDiv.innerHTML = `<h2>${project.name}</h2><p>${project.overview || ""}</p>`;
      }
    }
    loadProjectInfo();

    // タスク一覧を取得（タスクは "tasks" コレクション内に、projectIdフィールドで紐づけ）
    const tasksQuery = query(collection(db, "tasks"), where("projectId", "==", projectId));
    onSnapshot(tasksQuery, (snapshot) => {
      taskListDiv.innerHTML = "";
      snapshot.forEach((docSnap) => {
        const task = docSnap.data();
        const div = document.createElement("div");
        div.className = "task" + (task.completed ? " completed" : "");
        div.innerHTML = `
          <input type="checkbox" ${task.completed ? "checked" : ""} data-id="${docSnap.id}" class="complete-checkbox">
          <a href="detail.html?projectId=${projectId}&taskId=${docSnap.id}">
            <strong>${task.name}</strong>
          </a>
          <span>期限: ${task.deadline || "未設定"}</span>
          <span>担当: ${task.assignee || "未設定"}</span>
          <button data-id="${docSnap.id}" class="delete-btn">削除</button>
        `;
        taskListDiv.appendChild(div);
      });
    });

    // タスク追加処理
    const taskForm = document.getElementById("task-form");
    taskForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const name = document.getElementById("task-name").value;
      const deadline = document.getElementById("task-deadline").value;
      const assignee = document.getElementById("task-assignee").value;
      try {
        await addDoc(collection(db, "tasks"), {
          projectId,
          name,
          deadline,
          assignee,
          completed: false,
          createdAt: new Date()
        });
        taskForm.reset();
      } catch (error) {
        console.error("Error adding task: ", error);
      }
    });

    // タスク完了・削除のイベントリスナー（イベントデリゲーション）
    taskListDiv.addEventListener("click", async (e) => {
      const id = e.target.getAttribute("data-id");
      if (e.target.classList.contains("complete-checkbox")) {
        // 完了状態をトグル更新
        const taskRef = doc(db, "tasks", id);
        const newStatus = e.target.checked;
        await updateDoc(taskRef, { completed: newStatus });
      } else if (e.target.classList.contains("delete-btn")) {
        if (confirm("タスクを削除してもよろしいですか？")) {
          await deleteDoc(doc(db, "tasks", id));
        }
      }
    });
  </script>
</body>
</html>
